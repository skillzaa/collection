"use strict";class t{constructor(){this.parentId="0",this.id="0",this.sortOrder=0,this.createdAt=0,this.title="New Node",this.selected=!1,this.highlighted=!1,this.internalGap=2,this.folded=!1,this.titleCapitalization="first",this.details="",this.border=2,this.borderRadius=15,this.padding=8,this.fontSize=22,this.fontColor="#343a40",this.width=null,this.height=null,this.minWidth=50,this.minHeight=50,this.fontFamily="Impact",this.overWriteStyle=!1,this.x=0,this.y=0,this.titleX=null,this.titleY=null,this.childLess=null,this.ccw=null}setProperty(t,e){return"string"==typeof t&&(this[t]=e,!0)}getProperty(t){return this[t]}}class e{constructor(){this.messages=[],this.success=!1,this.data=null,this.errorNumber=0}addMessage(t){return this.messages.push(t),!0}getMessageString(){return this.messages.join()}getMessages(){return this.messages}}module.exports=class extends class extends class extends class extends class{constructor(t=[]){this.idCounter=1,this.sortOrderCounter=1,this.useRandomIds=!1,this.data=[],this.data=t}newId(){return!1===this.useRandomIds?String(this.idCounter++):this.uuid()}uuid(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return("x"==t?e:3&e|8).toString(16)}))}isIdUnique(t){for(let e=0;e<this.data.length;e++)if(this.data[e].id==t)return!1;return!0}blankCopy(){return new t}validateParentId(t){return"string"!=typeof t||""==t?"0":t}response(t=0,s="",r=!1,i=""){const n=new e;return n.addMessage(s),n.errorNumber=t,n.success=r,n.data=i,n}hasValue(t){return void 0!==t&&""!=t&&null!=t}checkIndexBounds(t){return Number(t)>=this.data.length||Number(t)<0?this.response(1,"The index is either larger or smaller than the number of items in the collection"):this.response(0,"All ok",!0,t)}shouldBeStringOrNumber(t){return"number"!=typeof t&&"string"!=typeof t?this.response(1,"The vlaue argument can just contain number or string values"):this.response(0,"ok",!0)}shouldBeStringNumberOrBool(t){return"number"!=typeof t&&"string"!=typeof t&&"boolean"!=typeof t?this.response(1,"The vlaue argument can just contain number, string or boolean values"):this.response(0,"ok",!0)}push(t){return this.data.push(t),!0}get length(){return this.data.length}}{constructor(t=[]){super(t)}delete(t){let e;if("object"==typeof t)e=String(t.id);else if("string"==typeof t)e=t;else{if("number"!=typeof t)return this.response(1,"Wrong format of ID ");e=String(t)}const s=this.idToIndex(e);if(!0===s.success){const t=this.data[s.data],r=[];for(let t=0;t<this.data.length;t++)this.data[t].id!==e&&r.push(this.data[t]);return this.data=r,this.response(0,"The deleted item is being returned in the value argument",!0,t)}return this.response(2,"Could not find this ID")}}{constructor(t=[]){super(t)}searchFirst(t="id",e=0){if(!0!==this.shouldBeStringNumberOrBool(e).success)return this.response(1,"The value argument can just contain number or string values");for(let s=0;s<this.data.length;s++)if(this.data[s][t]==e)return this.response(0,"Here is the first result found",!0,this.data[s]);return this.response(2,"No maching result found")}search(t="id",e=0){if(!0!==this.shouldBeStringNumberOrBool(e).success)return this.response(1,"The value argument can just contain number or string values");const s=[];for(let r=0;r<this.data.length;r++)this.data[r][t]==e&&s.push(this.data[r]);const r=s.length;if(0===r)return this.response(2,"No maching result found");{const t=this.response(0,`Here are ${s.length}  results found`,!0,s);return t.numberOfResults=r,t}}searchAnd(t,e,s,r){if(!0!==this.shouldBeStringNumberOrBool(e).success)return this.response(1,"The value argument can just contain number or string values");if(!0!==this.shouldBeStringNumberOrBool(r).success)return this.response(1,"The value argument can just contain number or string values");const i=[];for(let n=0;n<this.data.length;n++){const a=this.data[n];a[String(t)]==e&&a[String(s)]==r&&i.push(a)}const n=i.length;return this.response(0,`There are a total of ${n} searches found`,!0,i)}searchOr(t,e,s,r){if(!0!==this.shouldBeStringNumberOrBool(e).success)return this.response(1,"The value argument can just contain number string or boolean values");if(!0!==this.shouldBeStringNumberOrBool(r).success)return this.response(1,"The value argument can just contain number string or boolean values");const i=[];for(let n=0;n<this.data.length;n++){const a=this.data[n];a[String(t)]!=e&&a[String(s)]!=r||i.push(a)}const n=i.length;return this.response(0,`There are a total of ${n} searches found`,!0,i)}}{constructor(t=[]){super(t)}find(t){let e=!1;return this.data.forEach(s=>{s.id==t&&(e=s)}),e}findChildren(t){let e=[];return this.data.forEach(s=>{s.parentId==t&&e.push(s)}),e}}{constructor(t=[]){super(t)}add(e="0"){const s=new t;return s.id=this.newId(),s.sortOrder=this.sortOrderCounter++,s.createdAt=(new Date).getTime(),s.parentId=String(e),this.data.push(s),this.response(0,"All ok",!0,s)}insert(t){return!1===this.hasValue(t)?this.response(3,"A valid collection item is required"):("string"!=typeof t.id&&(t.id=String(t.id)),!1===this.hasValue(t.id)?this.response(1,"A valid id is required"):!0!==this.isIdUnique(String(t.id))?this.response(2,"The id provided already exists in the system. Please provide a unique id"):(!1!==this.hasValue(t.sortOrder)&&"number"==typeof t.sortOrder||(t.sortOrder=this.sortOrderCounter++),!1===this.hasValue(t.parentId)&&(t.parentId="0"),this.data.push(t),this.response(0,"All ok",!0,t)))}indexToId(t){const e=this.checkIndexBounds(t);if(!0!==e.success)return e;let s=this.data[t];return this.response(0,"",!0,String(s.id))}idToIndex(t){"string"!=typeof t&&(t=String(t));for(let e=0;e<this.data.length;e++)if(this.data[e].id==t)return this.response(0,"success",!0,e);return this.response(3,"Could not find the index. Most probably the id was not found")}isFirst(t){return this.data[0].id==t}getFirst(){return this.data[0]}getLast(){return this.data[this.data.length-1]}isLast(t){return this.data[this.data.length-1].id==t}find(t){let e=!1;return this.data.forEach(s=>{s.id==t&&(e=s)}),e}findChildren(t){let e=[];return this.data.forEach(s=>{s.parentId==t&&e.push(s)}),e}getPrevByIndex(t){if(0==this.isFirst(t.id)){let e=this.idToIndex(t.id);return this.data[e-1]}return!1}getNextByIndex(t){if(0==this.isLast(t.id)){let e=this.idToIndex(t.id);return this.data[e+1]}return!1}setPropertyAll(t,e){return this.data.forEach(s=>{s.setProperty(t,e)}),this.response(0,"ok",!0,this.data)}setRandom(){return this.data.forEach(t=>{t.setProperty("random",Math.ceil(9999*Math.random()))}),this.response(0,"ok",!0,this.data)}};
